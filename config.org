* Terminal

** Setting default shell to bash

#+BEGIN_SRC emacs-lisp
  ;; `ansi-term` will launch bash without prompt.
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC


* Packages

** Org

*** Org bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

  (add-hook 'shell-mode-hook
	(lambda ()
	  (face-remap-set-base 'comint-highlight-prompt :inherit
	  nil)))
#+END_SRC

** which-keys

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

** beacon

#+BEGIN_SRC emacs-lisp
;; This package highlights cursor for very small time when switching
;; buffers.
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

** cscope
   
#+BEGIN_SRC emacs-lisp
  (load-file "/usr/share/emacs/site-lisp/xcscope/xcscope.el")
  (require 'xcscope)
  (setq cscope-set-initial-directory "~/.cstags_dir/esp-idf/")
#+END_SRC

** avy

#+BEGIN_SRC emacs-lisp

  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))

#+END_SRC

** IDO
   
*** enable ido mode

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere 1)
  (ido-mode 1)
#+END_SRC


*** ido-vertical

#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC


*** smex

#+BEGIN_SRC emacs-lisp

  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))

#+END_SRC


*** switch buffers
#+BEGIN_SRC 

  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)

#+END_SRC

** evil mode enable
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init (evil-mode 1))
#+END_SRC
** switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("j" "k" "l" "f" "d" "s" "a"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC

** rainbow
#+BEGIN_SRC emacs-lisp

  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))

#+END_SRC


* Minor Settings

** subword (disabled)
#+BEGIN_SRC emacs-lisp
; (global-subword-mode 1)
#+END_SRC
** Hide toolbar, menubar and scrollbar.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
** Do not show welcome screen on startup.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
** Define alias for yes or no.
#+BEGIN_SRC emacs-lsip
    (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Scroll line by line when reached end of screen.
#+BEGIN_SRC emacs-lisp
    (setq scroll-conservatively 100)
#+END_SRC

** Ignore bell.
#+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
#+END_SRC

** When using GUI version, convert symbol text into symbols.
#+BEGIN_SRC emacs-lisp
    (when window-system (global-prettify-symbols-mode t))
#+END_SRC

** Do not create backup and autosave files.
#+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
    (setq auto-save-default nil)
#+END_SRC

** Show line number and relative numbers.
#+BEGIN_SRC emacs-lisp
    (global-display-line-numbers-mode t)
    (setq global-display-line-numbers 'relative)
#+END_SRC

** Set transperant background.
#+BEGIN_SRC emacs-lisp
    (set-frame-parameter (selected-frame) 'alpha '(85 75))
    (add-to-list 'default-frame-alist '(alpha 85 75))
#+END_SRC

** kill word (like diw in vim)
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC


* Buffers

** Enable ibuffer
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-x b") 'ibuffer)

#+END_SRC


* Config edit/reload

** edit

#+BEGIN_SRC emacs-lisp

  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
    (global-set-key (kbd "C-c e") 'config-visit)

#+END_SRC

** reload

#+BEGIN_SRC emacs-lisp

  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)

#+END_SRC


* window splitting function
#+BEGIN_SRC emacs-lisp

  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
    (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
    (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+END_SRC

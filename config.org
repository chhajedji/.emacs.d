* Terminal

** Setting default shell to bash

   #+BEGIN_SRC emacs-lisp
  ;; `ansi-term` will launch bash without prompt.
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
   #+END_SRC


* Packages


** Org

*** Org bullets

    #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

  (add-hook 'shell-mode-hook
    (lambda ()
      (face-remap-set-base 'comint-highlight-prompt :inherit
      nil)))
    #+END_SRC

*** Source window split disable
    #+BEGIN_SRC emacs-lisp
      ;; Hitting C-' to edit code in org mode will change current window
      ;; rather than splitting a new window.
      (setq org-src-window-setup 'current-window)

    #+END_SRC

*** Emacs lisp template shortcut
    #+BEGIN_SRC emacs-lisp
  ;; Type "<el <TAB>" and emacs-lisp template will auto reload!
  (add-to-list 'org-structure-template-alist
  '("el"  "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    #+END_SRC

** which-keys

   #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
   #+END_SRC

** beacon

   #+BEGIN_SRC emacs-lisp
;; This package highlights cursor for very small time when switching
;; buffers.
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
   #+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
	:ensure t)
#+END_SRC
** cscope and tags

   Adding cscope database.
   #+BEGIN_SRC emacs-lisp
	 (use-package xcscope
	   :ensure t
	   :config
	   (require 'xcscope)
	   ;; Enable cscope minor mode in all major modes.
	   (cscope-minor-mode 1)
	   (load-file "~/.emacs.d/xcscope.el")
	   (cscope-setup)
	   (setq cscope-set-initial-directory '("~/.cstags_dir/esp-idf/"))

	   ;; Unset the default binding C-\
	   (define-key global-map "\C-\\" nil)
	   ;; Set easy key bindings to navigate
	   (define-key global-map "\C-\\a"  'cscope-set-initial-directory)
	   (define-key global-map "\C-\\i"  'cscope-find-files-including-file)
	   (define-key global-map "\C-\\c"  'cscope-find-functions-calling-this-function)
	   (define-key global-map "\C-\\d"  'cscope-find-called-functions)
	   (define-key global-map "\C-\\e"  'cscope-find-egrep-pattern)
	   (define-key global-map "\C-\\s"  'cscope-find-this-symbol)
	   (define-key global-map "\C-\\f"  'cscope-find-this-file)
	   (define-key global-map "\C-\\g"  'cscope-find-global-definition)
	   (define-key global-map "\C-\\u"  'cscope-pop-mark))
   #+END_SRC


   Adding TAGS files.
   #+BEGIN_SRC emacs-lisp
     (setq tags-table-list '("~/.cstags_dir/esp-idf/TAGS"))
   #+END_SRC
** avy

   #+BEGIN_SRC emacs-lisp

  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))

   #+END_SRC

** IDO


*** enable ido mode

    #+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere 1)
  (ido-mode 1)
    #+END_SRC

*** ido-vertical

    #+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    #+END_SRC

*** switch buffers
    #+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)

    #+END_SRC

** smex

   #+BEGIN_SRC emacs-lisp

  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))

   #+END_SRC

** evil mode enable
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init (evil-mode 1))
     (evil-set-initial-state 'term-mode 'emacs)
   #+END_SRC
** undofu
#+BEGIN_SRC emacs-lisp
;  (use-package undo-fu
;  :ensure t
;  :init
;  ;; This option exists for users who prefer to trade-off undo/redo
;  ;; functionality with the ability to limit undo to a region. When this
;  ;; boolean is t, undoing with a selection will use undo within this
;  ;; region.
;   (setq undo-fu-allow-undo-in-region 1)
;  ;; Set keys for evil mode.
;  (define-key evil-normal-state-map "u" 'undo-fu-only-undo)
;  (define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)
;  (global-unset-key (kbd "C-z"))
;  (global-set-key (kbd "C-z")   'undo-fu-only-undo)
;  (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
#+END_SRC
** switch-window
   #+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
      '("j" "k" "l" "f" "d" "s" "a"))
    :bind
    ([remap other-window] . switch-window))
   #+END_SRC

** rainbow

*** Enable rainbow mode.
    #+BEGIN_SRC emacs-lisp

  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))

    #+END_SRC
*** Highlight matching brackets.
    #+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
    #+END_SRC

** dashboard
   #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((recents . 10)))
      (setq dashboard-banner-logo-title "Welcome to Emacs."))
   #+END_SRC

** diminish
   Diminish minor modes from mode line.
   #+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'rainbow-mode)
    (diminish 'subword-mode))
   #+END_SRC
** spaceline
   #+BEGIN_SRC emacs-lisp
;    (use-package spaceline
;      :ensure t
;      :config
;      (require 'spaceline-config)
;      (setq powerline-default-separator (quote arrow))
;      (spaceline-spacemacs-theme))
   #+END_SRC
** popup-kill-ring
   Interactive pop up for kill history. By default `M-y' switches to previous kills.
   #+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
   #+END_SRC
** company

   Set company for global mode, i.e., to work in all modes.
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
       (add-hook 'after-init-hook 'global-company-mode)
       :config
   #+END_SRC

   Set delay and minimum length to start suggestions.
   #+BEGIN_SRC emacs-lisp
       (setq company-idle-delay 1)
       (setq company-minimum-prefix-length 1))
   #+END_SRC

   By default M-n and M-p are mapped to navigate in the list. Change
   M-n and M-p to C-n and C-p.
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'company
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "C-n") #'company-select-next)
       (define-key company-active-map (kbd "C-p") #'company-select-previous))
   #+END_SRC


* Minor Settings

** Hide toolbar, menubar and scrollbar.
   #+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
   #+END_SRC
** Do not show welcome screen on startup.
   #+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
   #+END_SRC
** Define alias for yes or no.
   #+BEGIN_SRC emacs-lsip
    (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Scroll line by line when reached end of screen.
   #+BEGIN_SRC emacs-lisp
    (setq scroll-conservatively 100)
   #+END_SRC

** When using GUI version, convert symbol text into symbols.
   #+BEGIN_SRC emacs-lisp
    (when window-system (global-prettify-symbols-mode t))
   #+END_SRC

** Do not create backup and autosave files.
   #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
    (setq auto-save-default nil)
   #+END_SRC

** Not listed.


   Current file name will be displayed in title bar.
    #+BEGIN_SRC emacs-lisp
	(setq frame-title-format
	(list (format "%s %%S: %%j " (system-name))
	'(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
    #+END_SRC

	Show file name below mode line.
    #+BEGIN_SRC emacs-lisp
	(defun show-file-name ()
	"Show the full path file name in the minibuffer."
	(interactive)
	(message (buffer-file-name)))

	(global-set-key (kbd "C-c f") 'show-file-name) ; Or any other key you want
    #+END_SRC

   Ignore Bell.
   #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
   #+END_SRC

   Treat _ as a part of word
   #+BEGIN_SRC emacs-lisp
   (modify-syntax-entry ?_ "w")
   #+END_SRC

   List recently opened files in emacs.
   #+BEGIN_SRC emacs-lisp
     (require 'recentf)
     (recentf-mode 1)
     (setq recentf-max-menu-items 25)

     ;; Bind to `C-x C-r'.
     (global-set-key "\C-x\ \C-r" 'recentf-open-files)
   #+END_SRC

   Set relative line numbers in all modes.
   #+BEGIN_SRC emacs-lisp
   (require 'display-line-numbers)
   (global-display-line-numbers-mode)
   (setq display-line-numbers-type 'relative)
   #+END_SRC

   Indent file with 4 spaces.
   #+BEGIN_SRC emacs-lisp
     ;; (setq tab-stop-list (number-sequence 4 200 4))

     (defun my-generate-tab-stops (&optional width max)
       "Return a sequence suitable for `tab-stop-list'."
       (let* ((max-column (or max 200))
              (tab-width (or width tab-width))
              (count (/ max-column tab-width)))
         (number-sequence tab-width (* tab-width count) tab-width)))

     (setq tab-width 4)
     (setq tab-stop-list (my-generate-tab-stops))
   #+END_SRC

   Show time in mode line
   #+BEGIN_SRC emacs-lisp
   (setq display-time-24hr-format t)
   (display-time-mode 1)
   #+END_SRC

   Scroll one line up and down by M-n and M-p.
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
   (global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
   #+END_SRC

   Keep the cursor on same position on screen (i.e., move in file)
   while screen is moved up/down through M-n and M-p. By default
   cursor will remain at same position in file hence will move when
   moving screen up/down.
   #+BEGIN_SRC emacs-lisp
   ;; (setq scroll-preserve-screen-position 1)
   #+END_SRC

   Show line and column number on bottom bar.
   #+BEGIN_SRC emacs-lisp
   (line-number-mode 1)
   (column-number-mode 1)
   #+END_SRC

   Set font details: Background, Foreground, Font, Size.
   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil :background "black"
   :foreground "grey" :font "Noto Mono 12")
   #+END_SRC

   Set transparency when focused and unfocused.
   #+BEGIN_SRC emacs-lisp
   (set-frame-parameter (selected-frame) 'alpha '(87 80))
   (add-to-list 'default-frame-alist '(alpha 87 80))
   #+END_SRC

   Kill word (like ciw/diw in Vi)
   #+BEGIN_SRC emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w k") 'kill-whole-word)
   #+END_SRC

   Copy line (like yy in vim)
   #+BEGIN_SRC emacs-lisp
     (defun copy-whole-line()
       (interactive)
       (save-excursion
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol)))))
     (global-set-key (kbd "C-c w l") 'copy-whole-line)
   #+END_SRC


* Buffers

** Enable ibuffer
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
   #+END_SRC

** Kill current buffer
   #+BEGIN_SRC emacs-lisp
     (defun kill-curr-buffer()
       (interactive)
       (kill-buffer (current-buffer)))
     (global-set-key (kbd "C-x k") 'kill-curr-buffer)
   #+END_SRC

** Kill all buffers
   #+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-c k a") 'kill-all-buffers)
   #+END_SRC


* Config edit/reload

** Edit

   #+BEGIN_SRC emacs-lisp

  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
    (global-set-key (kbd "C-c e") 'config-visit)

   #+END_SRC

** Reload config.org

   #+BEGIN_SRC emacs-lisp

  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)

   #+END_SRC


* Window splitting function

  #+BEGIN_SRC emacs-lisp

  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
    (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
    (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

  #+END_SRC

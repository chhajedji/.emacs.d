* Theme

  Initialize theme at start, so that any other visual changes won't be
  overridden by default theme changes.

  Function to disable all applied themes.
  #+BEGIN_SRC emacs-lisp
    (defun cc/disable-all-themes ()
      "Disable all active themes."
      (interactive)
      (dolist (i custom-enabled-themes)
        (disable-theme i)))
  #+END_SRC

  Add advice to ~load-theme~ to disable all themes before loading new theme.
  #+BEGIN_SRC emacs-lisp
    ;; (defadvice load-theme (before disable-themes-first activate)
    ;;   (cc/disable-all-themes))
  #+END_SRC

  Load a theme.
   #+BEGIN_SRC emacs-lisp
     (cc/disable-all-themes)
     ;; (use-package afternoon-theme
     ;;   :ensure t
     ;;   :init)
     ;; (load-theme 'afternoon t)
     (load-theme 'spacemacs-dark t)
  #+END_SRC


* Packages
** Projectile

   Navigation in various projects.
   Guide: https://docs.projectile.mx/projectile/index.html

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode +1)
       :custom
       (projectile-completion-system 'helm))

   #+END_SRC

** Idle highlight

   Highlight all occurrences of word under cursor.
   #+BEGIN_SRC emacs-lisp
     (use-package idle-highlight-mode
       :ensure t
       :init)
     (idle-highlight-mode t)
   #+END_SRC

   Add programming mode hook to not annoy user.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook (lambda () (idle-highlight-mode t)))
   #+END_SRC

** Company-Irony

   Installation
   #+BEGIN_SRC emacs-lisp
     ;; Company
     (use-package company
       :ensure t
       :config
       (setq company-idle-delay 0)
       (setq company-minimum-perfix-length 4)

       ;; Setting up company for all modes.
       (global-company-mode))

     (use-package irony
       :ensure t
       :config
       (add-hook 'c++-mode-hook 'irony-mode)
       (add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
   #+END_SRC

   Binding ~C-p~ and ~C-n~ and unbinding ~M-n~ and ~M-p~ to scroll in company
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'company
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "C-n") 'company-select-next)
       (define-key company-active-map (kbd "C-p") 'company-select-previous))
   #+END_SRC

   Setting up company-irony
   #+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
   #+END_SRC

** Org

    Source window split disable
    #+BEGIN_SRC emacs-lisp
      ;; Hitting C-' to edit code in org mode will change current window
      ;; rather than splitting a new window.
      (setq org-src-window-setup 'current-window)

    #+END_SRC

    Emacs lisp template shortcut
    #+BEGIN_SRC emacs-lisp
  ;; Type "<el <TAB>" and emacs-lisp template will auto reload!
  (add-to-list 'org-structure-template-alist
  '("el"  "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    #+END_SRC


    Set indentation for bullets.
    #+BEGIN_SRC emacs-lisp
    (setq-default org-list-indent-offset 4)
    #+END_SRC
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

** Org bullets
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))
        :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

      (add-hook 'shell-mode-hook
                (lambda ()
                  (face-remap-set-base 'comint-highlight-prompt :inherit
                                       nil)))
    #+END_SRC
** which-keys

   #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
   #+END_SRC

** beacon

   #+BEGIN_SRC emacs-lisp
;; This package highlights cursor for very small time when switching
;; buffers.
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
   #+END_SRC

** magit

   #+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
   #+END_SRC
** cscope

   Adding cscope database.
   #+BEGIN_SRC emacs-lisp
     (use-package xcscope
       :ensure t
       :config
       (require 'xcscope)
       ;; Enable cscope minor mode in all major modes.
       (cscope-minor-mode 1)
       (load-file "~/.emacs.d/xcscope.el")
       (cscope-setup)
       (setq cscope-set-initial-directory '("~/.cstags_dir/esp-idf/"))

       ;; Unset the default binding C-\
       (define-key global-map "\C-\\" nil)
       ;; Set easy key bindings to navigate
       (define-key global-map "\C-\\S"  'cscope-tell-user-about-directory)
       (define-key global-map "\C-\\a"  'cscope-set-initial-directory)
       (define-key global-map "\C-\\i"  'cscope-find-files-including-file)
       (define-key global-map "\C-\\c"  'cscope-find-functions-calling-this-function)
       (define-key global-map "\C-\\d"  'cscope-find-called-functions)
       (define-key global-map "\C-\\e"  'cscope-find-egrep-pattern)
       (define-key global-map "\C-\\t"  'cscope-find-this-text-string)
       (define-key global-map "\C-\\s"  'cscope-find-this-symbol)
       (define-key global-map "\C-\\f"  'cscope-find-this-file)
       (define-key global-map "\C-\\g"  'cscope-find-global-definition)
       (define-key global-map "\C-\\G"  'cscope-find-global-definition-no-prompting)
       (define-key global-map "\C-\\u"  'cscope-pop-mark))
   #+END_SRC

** IDO


    #+BEGIN_SRC emacs-lisp
      ;; (setq ido-enable-flex-matching t)
      ;; (setq ido-create-new-buffer 'always)
      ;; (setq ido-everywhere 1)
      ;; (ido-mode 1)
    #+END_SRC

    Enable ido in vertical mode. By default options are horizontal.
    #+BEGIN_SRC emacs-lisp
      ;; (use-package ido-vertical-mode
      ;;   :ensure t
      ;;   :init
      ;;   (ido-vertical-mode 1))

      ;; (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    #+END_SRC

 Switch buffers.
    #+BEGIN_SRC emacs-lisp
      ;; (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
    #+END_SRC

** smex

   #+BEGIN_SRC emacs-lisp
     ;; (use-package smex
     ;;   :ensure t
     ;;   :init (smex-initialize)
     ;;   :bind
     ;;   ("M-x" . smex))
   #+END_SRC

** evil

   Initialize Evil mode.
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init (evil-mode 1))
     (evil-set-initial-state 'term-mode 'emacs)
   #+END_SRC

*** Evil key bindings

    Press TAB in markdown mode to toggle heading.
    #+BEGIN_SRC emacs-lisp
      (evil-define-key 'normal markdown-mode-map
        (kbd "TAB") 'markdown-cycle)
    #+END_SRC

** undofu
   #+BEGIN_SRC emacs-lisp
;  (use-package undo-fu
;  :ensure t
;  :init
;  ;; This option exists for users who prefer to trade-off undo/redo
;  ;; functionality with the ability to limit undo to a region. When this
;  ;; boolean is t, undoing with a selection will use undo within this
;  ;; region.
;   (setq undo-fu-allow-undo-in-region 1)
;  ;; Set keys for evil mode.
;  (define-key evil-normal-state-map "u" 'undo-fu-only-undo)
;  (define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)
;  (global-unset-key (kbd "C-z"))
;  (global-set-key (kbd "C-z")   'undo-fu-only-undo)
;  (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
   #+END_SRC
** switch-window
   #+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
      '("j" "k" "l" "f" "d" "s" "a"))
    :bind
    ([remap other-window] . switch-window))
   #+END_SRC

** rainbow

   Use this minor mode when you need to visualize the colors written
   in #ABCDEF format.

   #+BEGIN_SRC emacs-lisp
       (use-package rainbow-mode
         :ensure t
         :init
         (rainbow-mode 0))
   #+END_SRC

** dashboard
   #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((recents . 10)))
      (setq dashboard-banner-logo-title "Welcome to Emacs."))
   #+END_SRC

** diminish
   Diminish minor modes from mode line.
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       :init
       (diminish 'beacon-mode)
       (diminish 'which-key-mode)
       (diminish 'rainbow-mode)
       (diminish 'subword-mode)
       (diminish 'helm-mode)
       (diminish 'projectile-mode)
       (diminish 'irony-mode)
       (diminish 'company-mode)
       (diminish 'flyspell-mode)
       (diminish 'hi-lock-mode)
       (diminish 'auto-revert-mode)
       )
   #+END_SRC
** popup-kill-ring

   Interactive pop up for kill history. By default ~M-y~ switches to previous kills.

   #+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
   #+END_SRC

** Helm

   Installation
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t)
   #+END_SRC

   Basic config and key bindings.
   #+BEGIN_SRC emacs-lisp
     (require 'helm-config)

     (setq helm-split-window-in-side-p t
           helm-move-to-line-cycle-in-source t)

     (custom-set-variables '(helm-completion-style (quote emacs)))

     ;; Enable helm mode
     (helm-mode 1)

     ;; List and manage buffers.
     ;; Select multiple buffers with C-Space and M-D to kill all buffers.
     (global-set-key (kbd "C-x C-b") 'helm-buffers-list)

     (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
     ;; Bookmark menu.
     (global-set-key (kbd "C-x r b") 'helm-bookmark)
      ;; Helm resizes according to the number of candidates
     (helm-autoresize-mode 1)
     ;; Finding files with Helm
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
     ;; Use Helm for calculations
     (global-set-key (kbd "M-c") 'helm-calcul-expression)
     ;; Replaces the default isearch keybinding
     (global-set-key (kbd "C-s") 'helm-occur)
     ;; Helmized apropos interface
     (global-set-key (kbd "C-h a") 'helm-apropos)
     ;; Improved M-x menu
     (global-set-key (kbd "M-x") 'helm-M-x)
     ;; Show kill ring, pick something to paste
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
   #+END_SRC


* Minor Settings

** Terminal

   Setting default shell to bash. Due to this, ~ansi-term~ will not
   ask which shell to use.

   #+BEGIN_SRC emacs-lisp
      ;; `ansi-term' will launch bash without prompt.
      (defvar my-term-shell "/bin/bash")
      (defadvice ansi-term (before force-bash)
        (interactive (list my-term-shell)))
      (ad-activate 'ansi-term)
   #+END_SRC

   Keybinding to open ~ansi-term~ in a new split.

   #+BEGIN_SRC emacs-lisp
     (defun cc/split-ansi-term()
         "Start a ansi-term in a new split."
       (interactive)
       (split-window-sensibly)
       (other-window 1)
       (ansi-term "bash"))
     (global-set-key "\C-c\ t" 'cc/split-ansi-term)
   #+END_SRC

** Markdown

   View markdown preview as you edit a markdown file.
   Source: https://camsaul.com/emacs-lisp/2020/06/09/emacs-lisp-intro-markdown-live-previews-part-1.html
   #+BEGIN_SRC emacs-lisp
      (defun cam/-scroll-percentage ()
    (/ (float (line-number-at-pos (window-start)))
       (float (line-number-at-pos (point-max)))))

      (defun cam/-set-window-start-to-percentage (scroll-percentage)
    (goto-char (point-min))
    (let ((target-line-number (truncate (* (line-number-at-pos (point-max)) scroll-percentage))))
      (forward-line (1- target-line-number)))
    (set-window-start nil (point)))

      (defun cam/-render-markdown-preview-current-buffer ()
    (message "Rendering Markdown preview of %s" buffer-file-name)
    (shell-command-on-region (point-min) (point-max) "pandoc -f gfm" "*Preview Markdown Output*")
    (switch-to-buffer-other-window "*Preview Markdown Output*")
    (let ((document (libxml-parse-html-region (point) (point-max))))
      (erase-buffer)
      (shr-insert-document `(base ((href . ,url)) ,document))
      (setq buffer-read-only t)))

      (defun cam/-preview-markdown-file (filename)
    (save-selected-window
      (find-file filename)
      (let ((url (concat "file://" filename))
        (scroll-percentage (cam/-scroll-percentage)))
        (cam/-render-markdown-preview-current-buffer)
        (cam/-set-window-start-to-percentage scroll-percentage))))

      (defun cam/preview-markdown (&optional filename)
    "Render a markdown preview of FILENAME (by default, the current file) to HTML and display it with `shr-insert-document'."
    (interactive "fFile: ")
    (if filename
        (progn
          (cam/-preview-markdown-file filename)
          (switch-to-buffer (current-buffer)))
      (cam/-preview-markdown-file buffer-file-name)))
   #+END_SRC

** General

   Change yes/no question to y/n
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   ESC to be used as keyboard-quit (C-g)
   #+BEGIN_SRC emacs-lisp
         (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   #+END_SRC
   Quit ansi-term without confirming to kill running process.
   #+BEGIN_SRC emacs-lisp
     (defun set-no-process-query-on-exit ()
       (let ((proc (get-buffer-process (current-buffer))))
         (when (processp proc)
           (set-process-query-on-exit-flag proc nil))))

     (add-hook 'term-exec-hook 'set-no-process-query-on-exit)
   #+END_SRC
   Global line highlight mode keybinding.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c l h") 'global-hl-line-mode)
   #+END_SRC

   Enable all disabled commands permanently
   #+BEGIN_SRC emacs-lisp
     (setq disabled-command-function nil)
   #+END_SRC

   Kill buffer and close split.
   #+BEGIN_SRC emacs-lisp
     (defun cc/kill-buf-and-close-split()
     "Kill current buffer and delete the window."
         (interactive)
       (kill-curr-buffer)
       (delete-window))

     (global-set-key (kbd "C-x K") 'cc/kill-buf-and-close-split)
   #+END_SRC

   Set trailing faces and disable them for terminals.
   #+BEGIN_SRC emacs-lisp
     (setq-default show-trailing-whitespace t)
     (defun cc/no-ws-in-terminal ()
       (make-local-variable 'show-trailing-whitespace)
       (setq show-trailing-whitespace nil))

     ;; Add this function to all major modes hook.
     (add-hook 'term-mode-hook 'cc/no-ws-in-terminal)
     (add-hook 'eshell-mode-hook 'cc/no-ws-in-terminal)
   #+END_SRC

   Toggle trailing whitespaces
   #+BEGIN_SRC emacs-lisp
     (defun cc/toggle-trailing-whitespace()
     "This function toggles display of trailing whitespaces."
       (interactive)
       (setq show-trailing-whitespace (not show-trailing-whitespace))
       (message "show-trailing-whitespace is set to %s"
       show-trailing-whitespace))

     (global-set-key (kbd "C-c l w t") 'cc/toggle-trailing-whitespace)
   #+END_SRC

   Clear all whitespace
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c l w d") 'whitespace-cleanup)
   #+END_SRC

   Set scroll margin. Vim's emulation of ~scrolloff~ or ~so~. Set it to 0 for terminal Set it to 0 for terminal.
   #+BEGIN_SRC emacs-lisp
     (setq scroll-margin 3)
     (add-hook 'term-mode-hook
               (lambda ()
                 (make-local-variable 'scroll-margin)
                 (setq scroll-margin 0)))
   #+END_SRC

   Copy file path to clipboard.

   #+BEGIN_SRC emacs-lisp
     (defun copy-file-name-to-clipboard ()
       "Put the current file name on the clipboard"
       (interactive)
       (let ((filename (if (equal major-mode 'dired-mode)
                           default-directory
                         (buffer-file-name))))
         (when filename
           (with-temp-buffer
             (insert filename)
             (clipboard-kill-region (point-min) (point-max)))
           (message "%s copied to clipboard." filename ))))
     (global-set-key (kbd "C-c f c") 'copy-file-name-to-clipboard)
   #+END_SRC

   Custom grep command
   #+BEGIN_SRC emacs-lisp
   (setq grep-command "grep --color -InrH")
   #+END_SRC

   Hide toolbar, menubar and scrollbar.

   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   #+END_SRC

   Move around windows with Shift-Arrow

   #+BEGIN_SRC emacs-lisp
   (windmove-default-keybindings)
   #+END_SRC

   Set color and syntax highlighting in current line.
   This will only work if ~hl-line-mode~ or ~global-hl-line-mode~ is set.

   #+BEGIN_SRC emacs-lisp
   ; (set-face-background 'hl-line "#3e4446")
   ; (set-face-foreground 'highlight nil)
   #+END_SRC

   Do not show welcome screen on startup.

   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)
   #+END_SRC

   Change all "yes/no" prompt to y/n.
   #+BEGIN_SRC emacs-lsip
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   Enable spell check.
   This will enable spell check in text modes and
   only for comments in programming mode.

   #+BEGIN_SRC emacs-lisp
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
   #+END_SRC

   Toggle split view. Switch from vertical to horizontal split and
   vice-versa with same binding. Same as ~C-w L~ and ~C-w J~ in vi.

   #+BEGIN_SRC emacs-lisp
      (defun toggle-window-split ()
        (interactive)
        (if (= (count-windows) 2)
            (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                           (car next-win-edges))
                           (<= (cadr this-win-edges)
                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                   (car (window-edges (next-window))))
                'split-window-horizontally
              'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))

      (global-set-key (kbd "C-x |") 'toggle-window-split)
   #+END_SRC

   Scroll line by line when reached end of screen.

   #+BEGIN_SRC emacs-lisp
   (setq scroll-conservatively 100)
   #+END_SRC

   When using GUI version, convert symbol text into symbols.

   #+BEGIN_SRC emacs-lisp
   (when window-system (global-prettify-symbols-mode t))
   #+END_SRC

   Do not create backup and autosave files.

   #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
    (setq auto-save-default nil)
   #+END_SRC

   Show function name in mode-line for C functions

   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-common-hook
       (lambda ()
         (which-function-mode t)))
   #+END_SRC

   Current file name will be displayed in title bar.

   #+BEGIN_SRC emacs-lisp
    (setq frame-title-format
    (list (format "%s %%S: %%j " (system-name))
    '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
   #+END_SRC

   Show file name below mode line.

   #+BEGIN_SRC emacs-lisp
    (defun show-file-name ()
    "Show the full path file name in the minibuffer."
    (interactive)
    (message (buffer-file-name)))

    (global-set-key (kbd "C-c f s") 'show-file-name)
   #+END_SRC

   Ignore Bell.

   #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
   #+END_SRC

   Treat _ as a part of word

   #+BEGIN_SRC emacs-lisp
   (modify-syntax-entry ?_ "w")
   #+END_SRC

   List recently opened files in emacs.

   #+BEGIN_SRC emacs-lisp
     (require 'recentf)
     (recentf-mode 1)
     (setq recentf-max-menu-items 25)

     ;; Bind to `C-x C-r'.
     (global-set-key "\C-c\ f\ r" 'recentf-open-files)
   #+END_SRC

   Set relative line numbers in all modes.

   #+BEGIN_SRC emacs-lisp
     (require 'display-line-numbers)
     (global-display-line-numbers-mode t)
     (setq display-line-numbers 'relative)
   #+END_SRC

   Switch line numbers between relative and absolute.

   #+BEGIN_SRC emacs-lisp
     (defun cc/toggle-line-numbering ()
       "Switch line numbering between absolute and relative."
       (interactive)

       (if (eq display-line-numbers 'relative)
           (setq display-line-numbers t)
         (setq display-line-numbers 'relative))

       ;; Lisp Hacking: Same functionality can be achieved with this snippet also.
       ;; (setq display-line-numbers (if (eq display-line-numbers 'relative) t 'relative))
       )

     ;; Set key binding to toggle line number mode.
     (global-set-key (kbd "C-c a") 'cc/toggle-line-numbering)
   #+END_SRC

   Indent file with 4 spaces.

   #+BEGIN_SRC emacs-lisp
     (setq-default
      ;; Disabling tab mode. This will insert spaces instead of tabs.
      indent-tabs-mode nil
      ;;  Setting list for columns to move cursor to next available tab stop.
      tab-stop-list (number-sequence 4 200 4)

      ;; Setting `tab-width' will set how does pressing a TAB will look
      ;; like. Even though it will be interpreted as `\t', `tab-width'
      ;; sets what how many columns will be shifted on a TAB press.
      tab-width 8
      indent-line-function 'insert-tab)
   #+END_SRC

   Indent C code with 4 spaces. By default it is set to 2.

   #+BEGIN_SRC emacs-lisp
     (setq c-default-style "linux")
     (setq c-basic-offset 4)
   #+END_SRC

   Scroll one line up and down by M-n and M-p.

   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
   (global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
   #+END_SRC

   Keep the cursor on same position on screen (i.e., move in file)
   while screen is moved up/down through M-n and M-p. By default
   cursor will remain at same position in file hence will move when
   moving screen up/down.

   #+BEGIN_SRC emacs-lisp
   ;; (setq scroll-preserve-screen-position 1)
   #+END_SRC

   Always show matching bracket.

   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
     ;; Highlight brackets (default option).
     (setq show-paren-style 'parenthesis)

     ;; By default, there is a delay in showing matching parenthesis.
     (setq show-paren-delay 0)
   #+END_SRC

   Show line and column number on bottom bar.

   #+BEGIN_SRC emacs-lisp
   (line-number-mode 1)
   (column-number-mode 1)
   #+END_SRC

   Set font details: Background, Foreground, Font, Size.

   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :font "Monospace 12")
   #+END_SRC

   Set transparency when focused and unfocused.

   #+BEGIN_SRC emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha '(100 92))
   #+END_SRC

   Kill word (like ciw/diw in Vi)

   #+BEGIN_SRC emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w k") 'kill-whole-word)
   #+END_SRC

   Copy line (like yy in vim)

   #+BEGIN_SRC emacs-lisp
     (defun copy-whole-line()
       (interactive)
       (save-excursion
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol)))))
     (global-set-key (kbd "C-c w l") 'copy-whole-line)
   #+END_SRC

** Buffers

  Enable ibuffer

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x b") 'ibuffer)
  #+END_SRC

  Kill current buffer

  #+BEGIN_SRC emacs-lisp
     (defun kill-curr-buffer()
       (interactive)
       (kill-buffer (current-buffer)))
     (global-set-key (kbd "C-x k") 'kill-curr-buffer)
  #+END_SRC

  Kill all buffers

  #+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-c k a") 'kill-all-buffers)
  #+END_SRC

** Config edit/reload

  Edit ~\~/.emacs.d/config.org~

  #+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
    (global-set-key (kbd "C-c e") 'config-visit)
  #+END_SRC

  Reload ~config.org~

  #+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
  #+END_SRC


* Window splitting function

  Follow window after splitting horizontally or vertically.
  Default behavior is to just split window and remain in same window.

  #+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
    (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
    (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  #+END_SRC
